{{- if not .Values.existingSecret }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "openslides.fullname" . }}-secret-generator
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-5"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  labels: {{ include "openslides.labels" . | nindent 4 }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ include "openslides.fullname" . }}-secret-generator
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-5"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  labels: {{ include "openslides.labels" . | nindent 4 }}
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "create", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ include "openslides.fullname" . }}-secret-generator
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-5"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  labels: {{ include "openslides.labels" . | nindent 4 }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ include "openslides.fullname" . }}-secret-generator
subjects:
- kind: ServiceAccount
  name: {{ include "openslides.fullname" . }}-secret-generator
  namespace: {{ .Release.Namespace }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "openslides.fullname" . }}-secret-generator
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "0"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  labels: {{ include "openslides.labels" . | nindent 4 }}
spec:
  template:
    metadata:
      name: {{ include "openslides.fullname" . }}-secret-generator
      labels: {{ include "openslides.labels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "openslides.fullname" . }}-secret-generator
      restartPolicy: OnFailure
      containers:
      - name: secret-generator
        image: bitnami/kubectl:latest
        command:
        - /bin/bash
        - -c
        - |
          set -e

          echo "=== OpenSlides Secret Generator ==="

          SECRET_NAME="{{ include "openslides.fullname" . }}-secrets"

          # Function to generate or use existing value
          generate_or_use() {
            local key=$1
            local value=$2
            if [ -n "$value" ]; then
              echo "$value"
            else
              openssl rand -hex 32 | tr -d '\n'
            fi
          }

          # Generate or use provided secrets
          AUTH_TOKEN_KEY=$(generate_or_use "authTokenKey" "{{ .Values.secrets.authTokenKey }}")
          AUTH_COOKIE_KEY=$(generate_or_use "authCookieKey" "{{ .Values.secrets.authCookieKey }}")
          INTERNAL_AUTH_PASSWORD=$(generate_or_use "internalAuthPassword" "{{ .Values.secrets.internalAuthPassword }}")
          MANAGE_AUTH_PASSWORD=$(generate_or_use "manageAuthPassword" "{{ .Values.secrets.manageAuthPassword }}")
          SUPERADMIN=$(generate_or_use "superadmin" "{{ .Values.secrets.superadmin }}")
          POSTGRES_PASSWORD=$(generate_or_use "postgresPassword" "{{ .Values.secrets.postgresPassword }}")
          EMAIL_PASSWORD="{{ .Values.secrets.emailPassword }}"

          # Display generated passwords
          echo ""
          echo "=== Generated/Configured Secrets ==="
          {{- if not .Values.secrets.superadmin }}
          echo "SUPERADMIN PASSWORD (save this!): $SUPERADMIN"
          {{- else }}
          echo "SUPERADMIN PASSWORD: Using provided value"
          {{- end }}
          {{- if not .Values.secrets.postgresPassword }}
          echo "POSTGRES PASSWORD (save this!): $POSTGRES_PASSWORD"
          {{- else }}
          echo "POSTGRES PASSWORD: Using provided value"
          {{- end }}
          {{- if not .Values.secrets.emailPassword }}
          echo "WARNING: Email password not provided - email features will be disabled"
          {{- end }}
          echo ""

          # Create or update secret
          kubectl create secret generic "$SECRET_NAME" \
            --from-literal=auth_token_key="$AUTH_TOKEN_KEY" \
            --from-literal=auth_cookie_key="$AUTH_COOKIE_KEY" \
            --from-literal=internal_auth_password="$INTERNAL_AUTH_PASSWORD" \
            --from-literal=manage_auth_password="$MANAGE_AUTH_PASSWORD" \
            --from-literal=superadmin="$SUPERADMIN" \
            --from-literal=postgres_password="$POSTGRES_PASSWORD" \
            --from-literal=email_password="$EMAIL_PASSWORD" \
            --dry-run=client -o yaml | kubectl apply -f -

          echo "Secret $SECRET_NAME created/updated successfully"
{{- end }}
